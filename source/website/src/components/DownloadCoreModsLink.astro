---
export interface Props {
  /** The target game version. */
  version: string;

  /** A space-separated list of the classes of the inner `a` element. */
  class?: string;

  /** CSS styles to apply to the inner `a` element. */
  style?: string;

  /** A space-separated list of the classes of the inner `a` element. */
  outerClass?: string;

  /** CSS styles to apply to the inner `a` element. */
  outerStyle?: string;
}

// prettier-ignore
const {
  version,
  class: className,
  style,
  outerClass,
  outerStyle,
} = Astro.props as Props;
---

<download-core-mods-link
  style={outerStyle}
  class={`
    hidden
    script-inline-block
    ${outerClass}
  `}
  data-version={version}
>
  <button
    class={className}
    style={style}
    disabled
  >
    <slot />
  </button>
</download-core-mods-link>
<script>
  import { generateCoresQmod } from "../../../shared/generateCoresQmod";
  import { saveAs } from "file-saver";

  class DownloadCoreModsLink extends HTMLElement {
    buttonElement: HTMLButtonElement;
    blob: Blob | null = null;
    fileName: string | null = null;

    async generateQmod() {
      const version = this.dataset.version;

      if (version) {
        const data = await generateCoresQmod(version);

        this.blob = await data.qmod.generateAsync({
          type: "blob",
          mimeType: "application/qmod"
        });
        this.fileName = data.filename;
        this.buttonElement.disabled = false;
      }
    }

    constructor() {
      super();
      this.buttonElement = this.children[0]! as HTMLButtonElement;
      this.buttonElement.addEventListener("click", () => {
        if (this.blob && this.fileName) {
          saveAs(this.blob, this.fileName);
        }
      });
      this.generateQmod();
    }
  }

  customElements.define("download-core-mods-link", DownloadCoreModsLink);
</script>
