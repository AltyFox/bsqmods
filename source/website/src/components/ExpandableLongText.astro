---
import { ChevronDownIcon, ChevronUpIcon } from "@heroicons/react/16/solid";
---

<expandable-long-text>
  <div>
    <div>
      <slot />
    </div>
  </div>
  <div></div>
  <label class="shadow shadow-md backdrop-blur">
    <input type="checkbox" />
    <span><ChevronUpIcon /></span>
    <span><ChevronDownIcon /></span>
  </label>
</expandable-long-text>
<script>
  class ExpandableLongText extends HTMLElement {
    private contentElement: HTMLElement;
    private sizingElement: HTMLElement;
    private expandElement: HTMLInputElement;
    private collapseElement: HTMLElement;

    setSize() {
      this.collapseElement.style.maxHeight = this.expandElement.checked ? `${this.contentElement.offsetHeight}px` : "";

      if (this.expandElement.checked) {
        this.setAttribute("expanded", "");
      } else {
        this.removeAttribute("expanded");
      }
    }

    checkSize() {
      if (this.contentElement.clientHeight > this.sizingElement.clientHeight) {
        this.setAttribute("collapsible", "");
      } else {
        this.removeAttribute("collapsible");
      }

      this.setSize();
    }

    constructor() {
      super();

      const children = [...this.children];

      this.collapseElement = children[0]! as HTMLElement;
      this.contentElement = children[0].children[0]! as HTMLElement;
      this.sizingElement = children[1]! as HTMLElement;
      this.expandElement = children[2].children[0]! as HTMLInputElement;

      this.checkSize();

      window.addEventListener("resize", () => this.checkSize());
      this.expandElement.addEventListener("change", () => this.setSize());
    }
  }
  customElements.define("expandable-long-text", ExpandableLongText);
</script>
<style lang="scss">
  expandable-long-text {
    $max-height: 11.56rem;
    $breakpoint: 884px;

    position: relative;
    display: block;
    transition: padding-bottom 200ms;

    label {
      display: none;
    }

    &[collapsible] {
      @media (min-width: $breakpoint) {
        padding-bottom: 0.6rem;
      }

      & > div:first-of-type {
        display: block;
        overflow: hidden;
        mask-image: linear-gradient(180deg, #fff 0%, rgba(0, 0, 0, 1) calc(100% - 4rem), transparent 100%);

        & {
          transition: max-height 200ms;
          max-height: $max-height;
        }

        @media (max-width: $breakpoint) {
          max-height: initial !important;
          mask-image: initial;
        }
      }

      &[expanded] {
        padding-bottom: 2.5rem;

        & > div:first-of-type {
          mask-image: none;
        }
      }

      & > label {
        position: absolute;
        align-items: center;
        background: rgba(0, 0, 0, 0.7);
        border-radius: 50%;
        bottom: 0;
        color: #fff;
        cursor: pointer;
        display: flex;
        height: 32px;
        justify-content: center;
        left: 50%;
        transform: translateX(-50%);
        transition: background-color 200ms;
        width: 32px;

        @media (prefers-color-scheme: dark) {
          background: rgba(255, 255, 255, 0.7);
          color: #000;
        }

        &:hover {
          background-color: rgba(0, 0, 0, 1);

          @media (prefers-color-scheme: dark) {
            background-color: rgba(255, 255, 255, 1);
          }
        }

        @media (max-width: $breakpoint) {
          display: none;
        }

        & > input {
          display: none;
          & ~ * {
            display: initial;
          }
          & + * {
            display: none;
          }
          &:checked {
            & ~ * {
              display: none;
            }
            & + * {
              display: initial;
            }
          }
        }
      }
    }

    & > div:last-of-type {
      position: absolute;
      top: 0;
      left: 0;
      width: 1px;
      z-index: -1000;
      height: $max-height;
    }

    svg {
      height: 24px;
      width: 24px;
    }
  }
</style>
