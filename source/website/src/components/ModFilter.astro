---
export interface Props {
  /** A space-separated list of the classes of the inner `input` element. */
  class?: string;

  /** CSS styles to apply to the inner `input` element. */
  style?: string;

  /** A space-separated list of the classes of the inner `input` element. */
  outerClass?: string;

  /** CSS styles to apply to the inner `input` element. */
  outerStyle?: string;

  /** Placeholder text for the input element */
  placeholder?: string;
}
const {
  class: className,
  style,
  outerClass,
  outerStyle,
  placeholder,
} = Astro.props as Props;
---

<mod-filter class={outerClass}>
  <input
    disabled={true}
    type="text"
    class={className}
    style={style}
    placeholder={placeholder}
  />
</mod-filter>
<script>
  import { type ModObject, getModInfo } from "../getModInfo";
  class ModFilter extends HTMLElement {
    inputElement: HTMLInputElement;
    mods: ModObject[];

    filter() {
      const term = this.inputElement.value.trim().toLowerCase();

      for (const mod of this.mods) {
        const shouldDisplay =
          mod.id.toLowerCase().includes(term) ||
          mod.title.toLowerCase().includes(term) ||
          mod.author.toLowerCase().includes(term) ||
          mod.description.toLowerCase().includes(term);

        mod.isVisible(shouldDisplay);
      }
    }

    constructor() {
      super();
      this.mods = getModInfo();
      this.inputElement = this.children[0] as HTMLInputElement;
      this.inputElement.addEventListener("keyup", () => this.filter());
      this.inputElement.disabled = false;
    }
  }

  customElements.define("mod-filter", ModFilter);
</script>
