---
import { Dictionary } from "../../../shared/types/Dictionary";
import BottomAnchor from "../components/BottomAnchor.astro";
import GithubCorner from "../components/GithubCorner.astro";

export interface Props {
  title: string;
  headerTitle?: string;
  linkHome?: boolean;
  clearLastVisited?: boolean;
  pageScriptData?: Dictionary<any>;
}

const {
  title,
  headerTitle,
  linkHome,
  clearLastVisited = false,
  pageScriptData = {},
} = Astro.props;
let baseUrl = ((import.meta as any).env.BASE_URL as string) || "";

if (!baseUrl.endsWith("/")) {
  baseUrl = baseUrl + "/";
}
---

<!doctype html>
<html lang="en">
  <head>
    <script is:inline type="text/javascript">
      (() => {
        const theme = location.href
          .split("?")
          ?.at(1)
          ?.match(/(?:^|&)theme=(dark|light)(?:$|&)/)
          ?.at(1);

        if (theme) {
          document
            .querySelector("html")
            .setAttribute("data-color-scheme", theme);
        }

        const isQavs =
          location.href
            .split("?")
            ?.at(1)
            ?.match(/(?:^|&)isqavs=(true|false)(?:$|&)/)
            ?.at(1) === "true";

        if (isQavs) {
          const style = document.createElement("style");

          for (const display of ["none"]) {
            style.textContent += `.qavs-${display} { display: ${display} !important; }\n`;
          }

          document.head.appendChild(style);
        }
      })();
    </script>
    <base href={baseUrl} />
    <meta charset="UTF-8" />
    <meta name="theme-color" content="#0A0C11" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="generator" content={Astro.generator} />
    <title>{title || headerTitle}</title>
  </head>
  <body
    data-page-script-data={JSON.stringify(pageScriptData || {})}
    class={`
      after:bg-center
      after:bg-cover
      after:bg-no-repeat
      after:bg-pixelguy
      after:block
      after:fixed
      after:left-0
      after:min-h-[100vh]
      after:min-w-[100dvw]
      after:opacity-70
      after:top-0
      after:z-[-100]
      before:bg-black
      before:block
      before:fixed
      before:left-0
      before:min-h-[100vh]
      before:min-w-[100dvw]
      before:top-0
      before:z-[-100]
      block
      min-h-[100dvh]
      relative
    `}
  >
    <script is:inline type="text/javascript">
      ((style) => {
        for (const display of [
          "none",
          "block",
          "inline-block",
          "initial",
          "auto",
        ]) {
          style.textContent += `.script-${display} { display: ${display}; }\n`;
        }

        document.head.appendChild(style);
      })(document.createElement("style"));
    </script>
    <GithubCorner />
    <header
      class={`
        before:absolute
        before:backdrop-blur
        before:content['']
        before:inset-0
        before:z-[-1]
        bg-header-footer-bg
        pt-safe
        px-safe
        qavs-none
        relative
        text-header-text
      `}
    >
      <slot name="header">
        <div
          class={`
            block
            font-bold
            p-4
            text-[1.6rem]
            text-center
          `}
        >
          {
            linkHome ? (
              <a
                href={baseUrl}
                onclick={
                  clearLastVisited
                    ? "delete localStorage.lastVisitedModVersion; return true;"
                    : null
                }
              >
                {headerTitle || title}
              </a>
            ) : (
              headerTitle || title
            )
          }
        </div>
        <slot name="header-post-title" />
      </slot>
    </header>
    <div
      class={`
        content
        relative
      `}
      f-client-nav="true"
    >
      <slot />
    </div>
    <BottomAnchor>
      <footer
        class={`
          before:absolute
          before:backdrop-blur
          before:content['']
          before:inset-0
          before:z-[-1]
          bg-header-footer-bg
          bottom-0
          left-0
          pt-4
          py-safe-offset-4
          pb-safe-offset-4
          relative
          right-0
          t-center
          text-header-text
          text-center
        `}
      >
        <p>Beat Saber render by Pixelguy</p>
        <p>
          <a class="link qavs-none" href="generator/">Mod JSON Generator</a>
        </p>
      </footer>
    </BottomAnchor>
  </body>
</html>
<style is:global lang="scss">
  @mixin neutral-colors {
    --header-input-bg: #040b2fb2;
    --header-input-placeholder: rgba(255, 255, 255, 0.4);
    --header-input-text: #ffffff;
  }
  @mixin dark-colors {
    @include neutral-colors;
    --header-footer-bg: #000011b2;
    --header-text: #ffffff;
    --card-body-bg: #040b2fb2;
    --card-body-text: #ffffff;
    --card-header-bg: #000011b2;
    --github-corner-fill: #ffffff;
    --github-corner-color: #000000;
    --input-bg: #040b2fb2;
    --input-placeholder: rgba(255, 255, 255, 0.4);
    --input-text: #ffffff;
    --dropdown-menu-bg: #000011b2;
    --dropdown-menu-text: #ffffff;
    --dropdown-menu-hover: rgba(255, 255, 255, 0.1);
    --dropzone-bg: #040b2fb2;
    --dropzone-border: rgba(255, 255, 255, 0.2);
    --dropzone-text: #ffffff;
  }
  @mixin light-colors {
    @include neutral-colors;
    --header-footer-bg: #ffffffb3;
    --header-text: #000000;
    --card-body-bg: #ffffffb3;
    --card-body-text: #000000;
    --card-header-bg: rgba(0, 0, 0, 0.5);
    --github-corner-fill: #000000;
    --github-corner-color: #ffffff;
    --input-bg: #ffffffb3;
    --input-placeholder: rgba(0, 0, 0, 0.4);
    --input-text: #000000;
    --dropdown-menu-bg: #ffffffb3;
    --dropdown-menu-text: #000000;
    --dropdown-menu-hover: rgba(0, 0, 0, 0.1);
    --dropzone-bg: #ffffffb3;
    --dropzone-border: rgba(0, 0, 0, 0.2);
    --dropzone-text: #000000;
  }
  :root {
    @include dark-colors;

    @media (prefers-color-scheme: dark) {
      @include dark-colors;
    }

    @media (prefers-color-scheme: light) {
      @include light-colors;
    }
  }
  [data-color-scheme="dark"] {
    @include dark-colors;
  }
  [data-color-scheme="light"] {
    @include light-colors;
  }
</style>
<script>
  import { bindMultiClickAction } from "../../../shared/bindMultiClickAction";
  import { isNullOrWhitespace } from "../../../shared/isNullOrWhitespace";
  import { isQavs } from "../isQavs";

  if (isQavs) {
    // 5 clicks on the footer redirects to google.com.
    bindMultiClickAction(
      [...document.querySelectorAll("footer")].at(-1)!,
      () => {
        const defaultUrl = "https://google.com/";
        const result = prompt("Where do you want to go?", defaultUrl);

        if (!isNullOrWhitespace(result)) {
          location.href = result!;
        }
      },
      5
    );
  }
</script>
