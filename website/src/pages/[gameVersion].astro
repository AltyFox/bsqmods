---
import type { GetStaticPaths } from "astro";
import Layout from "../layouts/Layout.astro";
import ModList from "../components/ModList.astro";
import modJson from "../../public/mods.json";
import { Mod } from "../../../shared/types/Mod";
import { getCoreMods } from "../../CoreMods";
import VersionSelector from "../components/VersionSelector.astro";

export const getStaticPaths = (() => {
  return Object.keys(modJson).map((key) => ({
    params: {
      gameVersion: key,
    },
  }));
}) satisfies GetStaticPaths;

interface Params {
  gameVersion: string;
}

/**
 * Groups an array of objects by a specified key.
 *
 * @param array - The array of objects to group.
 * @param key - The key by which to group the objects.
 * @returns - An object where keys are unique values of the grouping key,
 *            and values are arrays of objects grouped by that key.
 */
function groupBy<T extends Record<string, any>>(
  array: T[],
  key: string
): Record<string, T[]> {
  return array.reduce((result: Record<string, T[]>, currentValue: T) => {
    const groupKey = currentValue[key];

    if (!result[groupKey]) {
      result[groupKey] = [];
    }

    result[groupKey].push(currentValue);

    return result;
  }, {});
}

const { gameVersion } = Astro.params as Params;
const modGroups = groupBy(modJson[gameVersion], "id");

function sortByKeyDescending(array: Mod[], key: string): Mod[] {
  return array.sort((a, b) => {
    if (a[key] > b[key]) return -1;
    if (a[key] < b[key]) return 1;
    return 0;
  });
}

function sortByKeyAscending(array: Mod[], key: string): Mod[] {
  return array.sort((a, b) => {
    if (a[key] > b[key]) return 1;
    if (a[key] < b[key]) return -1;
    return 0;
  });
}

for (const modList of Object.values(modGroups)) {
  sortByKeyDescending(modList as Mod[], "version");
}

const modList = Object.values(modGroups) as Mod[][];

modList.sort((a, b) => {
  if (a[0].name || "" > b[0].name || "") {
    return 1;
  }

  if (a[0].name || "" < b[0].name || "") {
    return 1;
  }

  return 0;
});

const coreMods = (await getCoreMods())[gameVersion];
console.log(coreMods);
---

<Layout
  title={`Quest Beat Saber Mods for ${gameVersion}`}
  headerTitle="Quest Beat Saber Mods"
>
  <div slot="header-post-title" class="text-center block pb-4">
    <VersionSelector currentVersion={gameVersion} />
  </div>
  <div class="text-center text-xl pt-2 block">Core Mods</div>
  <ModList
    mods={modList}
    core={true}
    coreMods={coreMods ? coreMods.mods : []}
  />
  <div class="text-center text-xl pt-2 block">Other Mods</div>
  <ModList
    mods={modList}
    core={false}
    coreMods={coreMods ? coreMods.mods : []}
  />
</Layout>
