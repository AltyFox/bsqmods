---
import DownloadCoreModsLink from "../components/DownloadCoreModsLink.astro";
import Layout from "../layouts/Layout.astro";
import ModList from "../components/ModList.astro";
import ModFilter from "../components/ModFilter.astro";
import VersionSelector from "../components/VersionSelector.astro";
import type { GetStaticPaths } from "astro";
import { Mod } from "../../../shared/types/Mod";
import { ModsCollection } from "../../../shared/types/ModsCollection";
import { compareAlphabeticallyAscInsensitive } from "../../../shared/comparisonFunctions";
import { compareVersionDescending } from "../../../scripts/shared/semverComparison";
import { getCoreMods } from "../../../shared/CoreMods";
import { readAllModsJson } from "../../../shared/readAllModsJson";

const modJson = readAllModsJson();

export const getStaticPaths = (() => {
  const modJson = readAllModsJson();
  return Object.keys(modJson).map((key) => ({
    params: {
      gameVersion: key,
    },
  }));
}) satisfies GetStaticPaths;

export interface Params {
  gameVersion: string;
}

/**
 * Groups an array of objects by a specified key.
 *
 * @param array - The array of objects to group.
 * @param key - The key by which to group the objects.
 * @returns - An object where keys are unique values of the grouping key,
 *            and values are arrays of objects grouped by that key.
 */
function groupBy<T extends Record<string, any>>(
  array: T[],
  key: string
): Record<string, T[]> {
  return array.reduce((result: Record<string, T[]>, currentValue: T) => {
    const groupKey = currentValue[key];

    if (!result[groupKey]) {
      result[groupKey] = [];
    }

    result[groupKey].push(currentValue);

    return result;
  }, {});
}

const { gameVersion } = Astro.params as Params;
const modGroups = groupBy((modJson as ModsCollection)[gameVersion], "id");

for (const modList of Object.values(modGroups)) {
  modList.sort((a, b) => compareVersionDescending(a.version, b.version));
}

const modList = Object.values(modGroups) as Mod[][];

modList.sort((a, b) =>
  compareAlphabeticallyAscInsensitive(a[0].name, b[0].name)
);

const coreMods = (await getCoreMods())[gameVersion];
---

<Layout
  title={`Quest Beat Saber Mods for ${gameVersion}`}
  headerTitle="Quest Beat Saber Mods"
  linkHome={true}
  clearLastVisited={true}
>
  <div slot="header-post-title" class="text-center block pb-4">
    <VersionSelector currentVersion={gameVersion} />
  </div>
  <ModFilter
    outerClass={`
      block
      text-center
      px-4
      pt-4
      mx-auto
      w-[1024px]
      max-w-full
    `}
    class={`
      backdrop-blur
      bg-white-alpha-70
      border
      border-white-alpha-20
      dark:bg-dark-card
      dark:placeholder-white-alpha-40
      dark:text-white
      dark:text-white
      max-w
      p-2
      placeholder-black-alpha-40
      rounded-md
      text-black
      w-full
      placeholder:text-center
    `}
    placeholder="Search mods"
  />
  <div
    class={`
      pt-2 block
      text-center
      text-white
      text-xl
      text-shadow
    `}
  >
    Core Mods
  </div>
  {
    coreMods && coreMods.mods.length > 0 ? (
      <DownloadCoreModsLink
        version={gameVersion}
        outerClass={`
          block
          text-center
          pt-2.5
        `}
        class={`
          btn
          btn-primary
          btn-sm
          rounded-lg
          text-white
        `}
      >
        Download All Core Mods
      </DownloadCoreModsLink>
    ) : null
  }
  <ModList
    mods={modList}
    core={true}
    coreMods={coreMods ? coreMods.mods : []}
  />
  <div
    class={`
      block
      pt-2
      text-center
      text-white
      text-xl
      text-shadow
    `}
  >
    Other Mods
  </div>
  <ModList
    mods={modList}
    core={false}
    coreMods={coreMods ? coreMods.mods : []}
  />
</Layout>
<style>
  .text-shadow {
    text-shadow: 0px 0px 4px rgba(0, 0, 0, 1);
  }
</style>
